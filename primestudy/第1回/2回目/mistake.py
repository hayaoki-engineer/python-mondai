# 間違えた問題

# 7　次の変数Zenに関して指定した場合、実行時にエラーとなるものはどれか。

Zen = 'SimpleIsBetterThanComplex'

# 自分の回答
# print(Zen[1000:])
# Zen[1000:] は、文字列の長さを超えるインデックスを指定していますが、エラーは発生しません。空の文字列が返ります。

# 正解
# print(Zen[0] = 'J')
# このコードは、文字列の0番目の文字を'J'に変更しようとしていますが、
# 文字列は変更できないため、エラーが発生します。

# print(Zen[:1000] + 'J')
# このコードは、文字列 Zen の先頭から最大1000文字を取得し、その後に文字 'J' を連結しています。
# Zen の長さは24文字なので、Zen[:1000] は Zen の全体を返し、エラーは発生しません。
# 結果として、出力は 'SimpleIsBetterThanComplexJ' になります。

# print(Zen[:])
# このコードは、文字列 Zen の先頭から最後までの文字を取得しています。
# 結果として、出力は 'SimpleIsBetterThanComplex' になります。

# 8

a, b = 0, 1  # aを0、bを1で初期化します。フィボナッチ数列の最初の2つの数です。
while b < 2:  # bが10未満の間、ループを続けます。
    print(b, end=',')  # 現在のbの値を出力し、カンマで区切ります。
    a, b = b, a + b  # aにbの値を代入し、bにはaとbの合計を代入します。これにより、次のフィボナッチ数が計算されます。

# 10 難しい

# 17 次の記述のうち、正しいものはどれか。

# docstringの1行目では、オブジェクトの目的を丁寧に記述し、母国語の異なるエンジニアが読んだ場合にも誤解が生じないようあえて冗長に説明するべきである。

# docstringはコンパクトにまとめ、空行は避けるべきである。

# 自分の回答
# コメント行は独立させず、該当コードについての説明であることが明示されるよう、同じ行に記述すべきである。

# 演算子の周囲やカンマの後ろ、カッコの内側にもスペースを入れ読みやすさに配慮すべきである。

# 正解
# 国際的な環境で使用する予定のコードでは、PythonのデフォルトであるUTF-8か、さらにプレーンなASCIIが常に最良である。

# 23 データ構造

# データ構造に関する次の記述のうち誤っているものはどれか。

# タプルは変更不能（immutable）、リストと集合は変更可能（mutable）である。

# 正解 = 誤りな記述
# ディクショナリは変更不能（immutable）であるが、キーの型は変更可能（mutable）であり、その値は一意でなければならない。

# ディクショナリは、全要素が「キー」と「値」のペアであるという点で、リストやタプルと大きく異なる。

# 集合には、「順序を持たない」「同一の値の要素を重複して持つことができない」などの特徴がある。

# リスト、タプル、集合、ディクショナリには、反復可能（iterable）であるという共通点がある。

# 25 モジュール

# モジュールに関する次の記述のうち、誤っているものはどれか。

# モジュールとは、Pythonの定義や文が入ったファイルである。そのファイル名は、モジュール名に接尾辞「.py」を付けたものである。
# あるモジュールがインポートされるときにインタープリタが検索する順序は、まずビルトインモジュール、次にsys.path変数で得られるディレクトリ、最後にシンボリックリンクを置いてあるディレクトリである。
# sys.pathが初期化されている場所は、入力スクリプトのあるディレクトリ、PYTHONPATH、インストールごとのデフォルトである。
# モジュール読み込みの高速化のため、Pythonはコンパイル済みのモジュールを「__pycache__」ディレクトリに、例えば「module.バージョン名.pyc」のような名前でキャッシュする。
# Pythonには標準モジュールのライブラリが付属する。


# 27 次のコードの実行結果として正しいものはどれか。

import math
print('{1:.3f}, {0:.5f}'.format(math.pi, math.e))
# 2.718, 3.14159

# 28 難しい

# 29 エラーと例外に関して

# エラーと例外に関する次の記述のうち誤っているものはどれか。

# Pythonのエラーには２つの種類がある。構文エラーと例外である。構文エラーはパース上のエラーとも呼ばれる。

# 文や式が構文的に正しくても、実行しようとするときにエラーが生じることがある。実行中に検知されるエラーは例外と呼ばれ、これは必ずしも致命的なものではない。

# 例外のほとんどはプログラムでは処理されず、その結果はエラーメッセージに現れる。エラーメッセージの最終行には、NameError、TypeErrorなど例外の型が記されている。

# [Ctrl]+[C]キーなどでユーザーがプログラムに割り込みをかけると、KeyboardInterrupt例外が送出される。

# 正解 = 誤りな記述
# パーサ（構文解釈器）は違反のある行を表示し、最後にエラーが検知された点を小さな矢印で示す。エラーは矢印より後のトークンが原因である。

# 31 難しい

# 33 難しい

# 35 難しい

# 39

# 仮想環境とパッケージに関する次の記述のうち誤っているものはどれか。

# Pythonの仮想環境とは、特定バージョンのPythonのインストール実体を含む、独立に機能するディレクトリツリーおよびパッケージなどから成り立つものである。
# 仮想環境をアクティベートしたら、pipを使ってパッケージのインストール、アップグレード、リムーブができる。pipはデフォルトではPython Package Indexからパッケージをインストールする。
# pip install --upgrade とすることで当該パッケージを最新バージョンにアップグレードすることができる。
# pip uninstall にパッケージ名を指定すると、その仮想環境からパッケージを削除できる。削除対象となるパッケージの複数指定はできない。← 誤り
# pip listはその仮想環境にインストールされたすべてのパッケージを表示する。pip freezeも同様の働きをするが、出力形式が異なる。

# 40

# 次の記述に関して誤っているものはどれか。

# 正解
# 変数とモジュールの補完はインタープリタの起動時に自動で有効になっている。

# [Tab]キーを押すと補完機能が呼び出せる。この機能はPythonの文（命令）の名前、現在のローカル変数、使用できるモジュール名を検索するものである。

# デフォルト設定ではユーザーディレクトリの「.pyhistory」ファイルにヒストリが保存される。ヒストリは対話型インタープリタセッションで利用できる。

# 拡張された対話型インタープリタとしてbpythonがある。これはタブ補完、オブジェクト探索、高度なヒストリ管理などの機能を持つ。

# bpythonに類似した拡張対話環境にIPythonがある。IPythonは「pip install ipython」でインストールでき、IPythonの対話モードはipythonコマンドで起動できる。